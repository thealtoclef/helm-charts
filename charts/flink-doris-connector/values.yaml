nameOverride: ~
fullnameOverride: ~

labels: {}
annotations: {}

# Flink Kubernetes Operator
operator:
  enabled: true

# Heimdall Dashboard for Flink Jobs
heimdall:
  enabled: true

# UI Proxy for Flink UIs
uiProxy:
  enabled: true
  replicas: 1
  image:
    repository: nginxinc/nginx-unprivileged
    tag: stable-alpine-slim
    pullPolicy: IfNotPresent
  imagePullSecrets: []

  podAnnotations: {}
  podLabels: {}

  podSecurityContext:
    fsGroup: 101
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]

  service:
    type: ClusterIP
    port: 8080
    annotations: {}
    # For LoadBalancer type
    # loadBalancerIP: ""
    # loadBalancerSourceRanges: []
    # For NodePort type
    # nodePort: 30081

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: ui-proxy.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  livenessProbe:
    httpGet:
      path: /health
      port: http
  readinessProbe:
    httpGet:
      path: /health
      port: http

  nodeSelector: {}

  tolerations: []

  affinity: {}

  env: []

# Auth Proxy
authProxy:
  global:
    publicDB: false
    autoIAMAuthn: false
  serviceAccount: name@project.iam.gserviceaccount.com
  securityContext:
    runAsUser: 65532
    runAsGroup: 65532
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

# Sources
sources: []
# sources:
#   # Example 1: Cloud SQL with auth proxy
#   - name: cake-mysql-stage
#     auth_proxy: cloud_sql
#     driver: mysql
#     instance_uri: bef-cake-sandbox:asia-southeast1:cake-mysql8-stage
#   # Example 2: Direct connection (no auth proxy)
#   - name: mysql-example
#     host: test.tld
#     port: 3306
#     username: debezium
#     password: dbz

# Sinks
sinks: []
# sinks:
#   - name: doris-cluster
#     fenodes: doris-cluster-fe.doris:8030
#     benodes: doris-cluster-cg.doris:8040
#     jdbc-url: jdbc:mysql://doris-cluster-fe.doris:9030
#     username: flink-cdc
#     password: flink-cdc

image:
  repository: flink
  tag: "1.20"
  digest: ~
  pullPolicy: IfNotPresent
flinkVersion: v1_20
serviceAccount: flink
ingress: {}
affinity: {}
nodeSelector: {}
tolerations: {}

podLabels: {}
podAnnotations: {}

podSecurityContext:
  fsGroup: 9999
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
containerSecurityContext:
  runAsUser: 9999
  runAsGroup: 9999
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]

env: []
envFrom: []

persistence:
  data:
    enabled: false
  log:
    enabled: false
objectStore: file:///opt/flink/data
global:
  jobManager: {}
  # jobManager:
  #   replicas: 1
  #   resource:
  #     cpu: 0.1
  #     memory: 512Mi
  #   podTemplate: {}
  taskManager: {}
  # taskManager:
  #   replicas: 1
  #   resource:
  #     cpu: 0.1
  #     memory: 1024Mi
  #   podTemplate: {}
  flinkConfiguration: {}
  # flinkConfiguration:
  #   # Job Manager resources configuration
  #   kubernetes.jobmanager.cpu.limit-factor: 5
  #   kubernetes.jobmanager.memory.limit-factor: 1.2
  #   jobmanager.memory.jvm-metaspace.size: 128 mb
  #   jobmanager.memory.jvm-overhead.min: 0 mb
  #   jobmanager.memory.jvm-overhead.max: 0 mb
  #   # Task Manager resources configuration
  #   kubernetes.taskmanager.cpu.limit-factor: 5
  #   kubernetes.taskmanager.memory.limit-factor: 1.2
  #   taskmanager.memory.managed.size: 0 mb
  #   taskmanager.memory.network.min: 8 mb
  #   taskmanager.memory.network.max: 8 mb
  #   taskmanager.memory.jvm-metaspace.size: 128 mb
  #   taskmanager.memory.jvm-overhead.min: 0 mb
  #   taskmanager.memory.jvm-overhead.max: 0 mb
  job: {}
  # job:
  #   state: running
  #   upgradeMode: last-state
  #   allowNonRestoredState: false
  sourceRef: ~
  sourceConf: {}
  sinkRef: ~
  sinkConf: {}
  tableConf: {}
  singleSink: ~
  extraArgs: []
pipelines: []
# pipelines:
#   # Pipeline 1: Uses global settings
#   - name: global-pipeline
#     resetNonce: 1
#     sourceType: mysql
#     sourceDatabase: inventory
#     sinkDatabase: inventory_mysql
#     excludingTables: geom
#     sourceRef: mysql-example
#     sinkRef: doris-cluster
#     singleSink: true
#   # Pipeline 2: Override settings
#   - name: custom-resource-pipeline
#     flinkConfiguration:
#       kubernetes.taskmanager.cpu.limit-factor: 10
#     taskManager:
#       resource:
#         memory: 2048Mi
#     sourceType: mysql
#     sourceDatabase: inventory
#     sinkDatabase: inventory_mysql_custom
#     sourceRef: cake-mysql-stage
#     sinkRef: doris-cluster
#     singleSink: true
#     extraArgs: ["--additional-config", "custom-value"]
